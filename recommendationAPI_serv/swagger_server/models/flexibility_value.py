# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FlexibilityValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, temperature_flexibility: float=None, co2_flexibility: float=None, humidity_flexibility: float=None, voc_flexibility: float=None, light_flexibility: float=None, sound_flexibility: float=None):  # noqa: E501
        """FlexibilityValue - a model defined in Swagger

        :param temperature_flexibility: The temperature_flexibility of this FlexibilityValue.  # noqa: E501
        :type temperature_flexibility: float
        :param co2_flexibility: The co2_flexibility of this FlexibilityValue.  # noqa: E501
        :type co2_flexibility: float
        :param humidity_flexibility: The humidity_flexibility of this FlexibilityValue.  # noqa: E501
        :type humidity_flexibility: float
        :param voc_flexibility: The voc_flexibility of this FlexibilityValue.  # noqa: E501
        :type voc_flexibility: float
        :param light_flexibility: The light_flexibility of this FlexibilityValue.  # noqa: E501
        :type light_flexibility: float
        :param sound_flexibility: The sound_flexibility of this FlexibilityValue.  # noqa: E501
        :type sound_flexibility: float
        """
        self.swagger_types = {
            'temperature_flexibility': float,
            'co2_flexibility': float,
            'humidity_flexibility': float,
            'voc_flexibility': float,
            'light_flexibility': float,
            'sound_flexibility': float
        }

        self.attribute_map = {
            'temperature_flexibility': 'temperature_flexibility',
            'co2_flexibility': 'co2_flexibility',
            'humidity_flexibility': 'humidity_flexibility',
            'voc_flexibility': 'voc_flexibility',
            'light_flexibility': 'light_flexibility',
            'sound_flexibility': 'sound_flexibility'
        }
        self._temperature_flexibility = temperature_flexibility
        self._co2_flexibility = co2_flexibility
        self._humidity_flexibility = humidity_flexibility
        self._voc_flexibility = voc_flexibility
        self._light_flexibility = light_flexibility
        self._sound_flexibility = sound_flexibility

    @classmethod
    def from_dict(cls, dikt) -> 'FlexibilityValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FlexibilityValue of this FlexibilityValue.  # noqa: E501
        :rtype: FlexibilityValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature_flexibility(self) -> float:
        """Gets the temperature_flexibility of this FlexibilityValue.

        Flexible for temperature.  # noqa: E501

        :return: The temperature_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._temperature_flexibility

    @temperature_flexibility.setter
    def temperature_flexibility(self, temperature_flexibility: float):
        """Sets the temperature_flexibility of this FlexibilityValue.

        Flexible for temperature.  # noqa: E501

        :param temperature_flexibility: The temperature_flexibility of this FlexibilityValue.
        :type temperature_flexibility: float
        """

        self._temperature_flexibility = temperature_flexibility

    @property
    def co2_flexibility(self) -> float:
        """Gets the co2_flexibility of this FlexibilityValue.

        Flexible for CO2.  # noqa: E501

        :return: The co2_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._co2_flexibility

    @co2_flexibility.setter
    def co2_flexibility(self, co2_flexibility: float):
        """Sets the co2_flexibility of this FlexibilityValue.

        Flexible for CO2.  # noqa: E501

        :param co2_flexibility: The co2_flexibility of this FlexibilityValue.
        :type co2_flexibility: float
        """

        self._co2_flexibility = co2_flexibility

    @property
    def humidity_flexibility(self) -> float:
        """Gets the humidity_flexibility of this FlexibilityValue.

        Flexible for humidity.  # noqa: E501

        :return: The humidity_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._humidity_flexibility

    @humidity_flexibility.setter
    def humidity_flexibility(self, humidity_flexibility: float):
        """Sets the humidity_flexibility of this FlexibilityValue.

        Flexible for humidity.  # noqa: E501

        :param humidity_flexibility: The humidity_flexibility of this FlexibilityValue.
        :type humidity_flexibility: float
        """

        self._humidity_flexibility = humidity_flexibility

    @property
    def voc_flexibility(self) -> float:
        """Gets the voc_flexibility of this FlexibilityValue.

        Flexible for Volatile Organic Compounds (VOC).  # noqa: E501

        :return: The voc_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._voc_flexibility

    @voc_flexibility.setter
    def voc_flexibility(self, voc_flexibility: float):
        """Sets the voc_flexibility of this FlexibilityValue.

        Flexible for Volatile Organic Compounds (VOC).  # noqa: E501

        :param voc_flexibility: The voc_flexibility of this FlexibilityValue.
        :type voc_flexibility: float
        """

        self._voc_flexibility = voc_flexibility

    @property
    def light_flexibility(self) -> float:
        """Gets the light_flexibility of this FlexibilityValue.

        Flexible for light.  # noqa: E501

        :return: The light_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._light_flexibility

    @light_flexibility.setter
    def light_flexibility(self, light_flexibility: float):
        """Sets the light_flexibility of this FlexibilityValue.

        Flexible for light.  # noqa: E501

        :param light_flexibility: The light_flexibility of this FlexibilityValue.
        :type light_flexibility: float
        """

        self._light_flexibility = light_flexibility

    @property
    def sound_flexibility(self) -> float:
        """Gets the sound_flexibility of this FlexibilityValue.

        Flexible for ambient sound.  # noqa: E501

        :return: The sound_flexibility of this FlexibilityValue.
        :rtype: float
        """
        return self._sound_flexibility

    @sound_flexibility.setter
    def sound_flexibility(self, sound_flexibility: float):
        """Sets the sound_flexibility of this FlexibilityValue.

        Flexible for ambient sound.  # noqa: E501

        :param sound_flexibility: The sound_flexibility of this FlexibilityValue.
        :type sound_flexibility: float
        """

        self._sound_flexibility = sound_flexibility
