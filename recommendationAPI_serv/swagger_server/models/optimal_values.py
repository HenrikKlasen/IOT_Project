# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.one_of_optimal_values_temperature_opt import OneOfOptimalValuesTemperatureOpt  # noqa: F401,E501
from swagger_server.models.one_of_optimal_values_co2_opt import OneOfOptimalValuesCo2Opt  # noqa: F401,E501
from swagger_server.models.one_of_optimal_values_humidity_opt import OneOfOptimalValuesHumidityOpt  # noqa: F401,E501
from swagger_server.models.one_of_optimal_values_voc_opt import OneOfOptimalValuesVocOpt  # noqa: F401,E501
from swagger_server.models.one_of_optimal_values_light_opt import OneOfOptimalValuesLightOpt  # noqa: F401,E501
from swagger_server.models.one_of_optimal_values_sound_opt import OneOfOptimalValuesSoundOpt  # noqa: F401,E501
from swagger_server import util


class OptimalValues(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, temperature_opt: OneOfOptimalValuesTemperatureOpt=None, co2_opt: OneOfOptimalValuesCo2Opt=None, humidity_opt: OneOfOptimalValuesHumidityOpt=None, voc_opt: OneOfOptimalValuesVocOpt=None, light_opt: OneOfOptimalValuesLightOpt=None, sound_opt: OneOfOptimalValuesSoundOpt=None):  # noqa: E501
        """OptimalValues - a model defined in Swagger

        :param temperature_opt: The temperature_opt of this OptimalValues.  # noqa: E501
        :type temperature_opt: OneOfOptimalValuesTemperatureOpt
        :param co2_opt: The co2_opt of this OptimalValues.  # noqa: E501
        :type co2_opt: OneOfOptimalValuesCo2Opt
        :param humidity_opt: The humidity_opt of this OptimalValues.  # noqa: E501
        :type humidity_opt: OneOfOptimalValuesHumidityOpt
        :param voc_opt: The voc_opt of this OptimalValues.  # noqa: E501
        :type voc_opt: OneOfOptimalValuesVocOpt
        :param light_opt: The light_opt of this OptimalValues.  # noqa: E501
        :type light_opt: OneOfOptimalValuesLightOpt
        :param sound_opt: The sound_opt of this OptimalValues.  # noqa: E501
        :type sound_opt: OneOfOptimalValuesSoundOpt
        """
        self.swagger_types = {
            'temperature_opt': OneOfOptimalValuesTemperatureOpt,
            'co2_opt': OneOfOptimalValuesCo2Opt,
            'humidity_opt': OneOfOptimalValuesHumidityOpt,
            'voc_opt': OneOfOptimalValuesVocOpt,
            'light_opt': OneOfOptimalValuesLightOpt,
            'sound_opt': OneOfOptimalValuesSoundOpt
        }

        self.attribute_map = {
            'temperature_opt': 'temperature_opt',
            'co2_opt': 'co2_opt',
            'humidity_opt': 'humidity_opt',
            'voc_opt': 'voc_opt',
            'light_opt': 'light_opt',
            'sound_opt': 'sound_opt'
        }
        self._temperature_opt = temperature_opt
        self._co2_opt = co2_opt
        self._humidity_opt = humidity_opt
        self._voc_opt = voc_opt
        self._light_opt = light_opt
        self._sound_opt = sound_opt

    @classmethod
    def from_dict(cls, dikt) -> 'OptimalValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OptimalValues of this OptimalValues.  # noqa: E501
        :rtype: OptimalValues
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature_opt(self) -> OneOfOptimalValuesTemperatureOpt:
        """Gets the temperature_opt of this OptimalValues.


        :return: The temperature_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesTemperatureOpt
        """
        return self._temperature_opt

    @temperature_opt.setter
    def temperature_opt(self, temperature_opt: OneOfOptimalValuesTemperatureOpt):
        """Sets the temperature_opt of this OptimalValues.


        :param temperature_opt: The temperature_opt of this OptimalValues.
        :type temperature_opt: OneOfOptimalValuesTemperatureOpt
        """

        self._temperature_opt = temperature_opt

    @property
    def co2_opt(self) -> OneOfOptimalValuesCo2Opt:
        """Gets the co2_opt of this OptimalValues.


        :return: The co2_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesCo2Opt
        """
        return self._co2_opt

    @co2_opt.setter
    def co2_opt(self, co2_opt: OneOfOptimalValuesCo2Opt):
        """Sets the co2_opt of this OptimalValues.


        :param co2_opt: The co2_opt of this OptimalValues.
        :type co2_opt: OneOfOptimalValuesCo2Opt
        """

        self._co2_opt = co2_opt

    @property
    def humidity_opt(self) -> OneOfOptimalValuesHumidityOpt:
        """Gets the humidity_opt of this OptimalValues.


        :return: The humidity_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesHumidityOpt
        """
        return self._humidity_opt

    @humidity_opt.setter
    def humidity_opt(self, humidity_opt: OneOfOptimalValuesHumidityOpt):
        """Sets the humidity_opt of this OptimalValues.


        :param humidity_opt: The humidity_opt of this OptimalValues.
        :type humidity_opt: OneOfOptimalValuesHumidityOpt
        """

        self._humidity_opt = humidity_opt

    @property
    def voc_opt(self) -> OneOfOptimalValuesVocOpt:
        """Gets the voc_opt of this OptimalValues.


        :return: The voc_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesVocOpt
        """
        return self._voc_opt

    @voc_opt.setter
    def voc_opt(self, voc_opt: OneOfOptimalValuesVocOpt):
        """Sets the voc_opt of this OptimalValues.


        :param voc_opt: The voc_opt of this OptimalValues.
        :type voc_opt: OneOfOptimalValuesVocOpt
        """

        self._voc_opt = voc_opt

    @property
    def light_opt(self) -> OneOfOptimalValuesLightOpt:
        """Gets the light_opt of this OptimalValues.


        :return: The light_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesLightOpt
        """
        return self._light_opt

    @light_opt.setter
    def light_opt(self, light_opt: OneOfOptimalValuesLightOpt):
        """Sets the light_opt of this OptimalValues.


        :param light_opt: The light_opt of this OptimalValues.
        :type light_opt: OneOfOptimalValuesLightOpt
        """

        self._light_opt = light_opt

    @property
    def sound_opt(self) -> OneOfOptimalValuesSoundOpt:
        """Gets the sound_opt of this OptimalValues.


        :return: The sound_opt of this OptimalValues.
        :rtype: OneOfOptimalValuesSoundOpt
        """
        return self._sound_opt

    @sound_opt.setter
    def sound_opt(self, sound_opt: OneOfOptimalValuesSoundOpt):
        """Sets the sound_opt of this OptimalValues.


        :param sound_opt: The sound_opt of this OptimalValues.
        :type sound_opt: OneOfOptimalValuesSoundOpt
        """

        self._sound_opt = sound_opt
