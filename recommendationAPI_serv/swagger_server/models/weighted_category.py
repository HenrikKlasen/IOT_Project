# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeightedCategory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, temperature_weight: float=None, co2_weight: float=None, humidity_weight: float=None, voc_weight: float=None, light_weight: float=None, sound_weight: float=None):  # noqa: E501
        """WeightedCategory - a model defined in Swagger

        :param temperature_weight: The temperature_weight of this WeightedCategory.  # noqa: E501
        :type temperature_weight: float
        :param co2_weight: The co2_weight of this WeightedCategory.  # noqa: E501
        :type co2_weight: float
        :param humidity_weight: The humidity_weight of this WeightedCategory.  # noqa: E501
        :type humidity_weight: float
        :param voc_weight: The voc_weight of this WeightedCategory.  # noqa: E501
        :type voc_weight: float
        :param light_weight: The light_weight of this WeightedCategory.  # noqa: E501
        :type light_weight: float
        :param sound_weight: The sound_weight of this WeightedCategory.  # noqa: E501
        :type sound_weight: float
        """
        self.swagger_types = {
            'temperature_weight': float,
            'co2_weight': float,
            'humidity_weight': float,
            'voc_weight': float,
            'light_weight': float,
            'sound_weight': float
        }

        self.attribute_map = {
            'temperature_weight': 'temperature_weight',
            'co2_weight': 'co2_weight',
            'humidity_weight': 'humidity_weight',
            'voc_weight': 'voc_weight',
            'light_weight': 'light_weight',
            'sound_weight': 'sound_weight'
        }
        self._temperature_weight = temperature_weight
        self._co2_weight = co2_weight
        self._humidity_weight = humidity_weight
        self._voc_weight = voc_weight
        self._light_weight = light_weight
        self._sound_weight = sound_weight

    @classmethod
    def from_dict(cls, dikt) -> 'WeightedCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeightedCategory of this WeightedCategory.  # noqa: E501
        :rtype: WeightedCategory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature_weight(self) -> float:
        """Gets the temperature_weight of this WeightedCategory.

        Importance Weight for temperature.  # noqa: E501

        :return: The temperature_weight of this WeightedCategory.
        :rtype: float
        """
        return self._temperature_weight

    @temperature_weight.setter
    def temperature_weight(self, temperature_weight: float):
        """Sets the temperature_weight of this WeightedCategory.

        Importance Weight for temperature.  # noqa: E501

        :param temperature_weight: The temperature_weight of this WeightedCategory.
        :type temperature_weight: float
        """

        self._temperature_weight = temperature_weight

    @property
    def co2_weight(self) -> float:
        """Gets the co2_weight of this WeightedCategory.

        Importance Weight for CO2.  # noqa: E501

        :return: The co2_weight of this WeightedCategory.
        :rtype: float
        """
        return self._co2_weight

    @co2_weight.setter
    def co2_weight(self, co2_weight: float):
        """Sets the co2_weight of this WeightedCategory.

        Importance Weight for CO2.  # noqa: E501

        :param co2_weight: The co2_weight of this WeightedCategory.
        :type co2_weight: float
        """

        self._co2_weight = co2_weight

    @property
    def humidity_weight(self) -> float:
        """Gets the humidity_weight of this WeightedCategory.

        Importance Weight for humidity.  # noqa: E501

        :return: The humidity_weight of this WeightedCategory.
        :rtype: float
        """
        return self._humidity_weight

    @humidity_weight.setter
    def humidity_weight(self, humidity_weight: float):
        """Sets the humidity_weight of this WeightedCategory.

        Importance Weight for humidity.  # noqa: E501

        :param humidity_weight: The humidity_weight of this WeightedCategory.
        :type humidity_weight: float
        """

        self._humidity_weight = humidity_weight

    @property
    def voc_weight(self) -> float:
        """Gets the voc_weight of this WeightedCategory.

        Importance Weight for Volatile Organic Compounds (VOC).  # noqa: E501

        :return: The voc_weight of this WeightedCategory.
        :rtype: float
        """
        return self._voc_weight

    @voc_weight.setter
    def voc_weight(self, voc_weight: float):
        """Sets the voc_weight of this WeightedCategory.

        Importance Weight for Volatile Organic Compounds (VOC).  # noqa: E501

        :param voc_weight: The voc_weight of this WeightedCategory.
        :type voc_weight: float
        """

        self._voc_weight = voc_weight

    @property
    def light_weight(self) -> float:
        """Gets the light_weight of this WeightedCategory.

        Importance Weight for light.  # noqa: E501

        :return: The light_weight of this WeightedCategory.
        :rtype: float
        """
        return self._light_weight

    @light_weight.setter
    def light_weight(self, light_weight: float):
        """Sets the light_weight of this WeightedCategory.

        Importance Weight for light.  # noqa: E501

        :param light_weight: The light_weight of this WeightedCategory.
        :type light_weight: float
        """

        self._light_weight = light_weight

    @property
    def sound_weight(self) -> float:
        """Gets the sound_weight of this WeightedCategory.

        Importance Weight for ambient sound.  # noqa: E501

        :return: The sound_weight of this WeightedCategory.
        :rtype: float
        """
        return self._sound_weight

    @sound_weight.setter
    def sound_weight(self, sound_weight: float):
        """Sets the sound_weight of this WeightedCategory.

        Importance Weight for ambient sound.  # noqa: E501

        :param sound_weight: The sound_weight of this WeightedCategory.
        :type sound_weight: float
        """

        self._sound_weight = sound_weight
