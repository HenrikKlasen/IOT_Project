# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RoomMetrics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, temperature: float=None, co2: float=None, humidity: float=None, voc: float=None, light: float=None, sound: float=None):  # noqa: E501
        """RoomMetrics - a model defined in Swagger

        :param temperature: The temperature of this RoomMetrics.  # noqa: E501
        :type temperature: float
        :param co2: The co2 of this RoomMetrics.  # noqa: E501
        :type co2: float
        :param humidity: The humidity of this RoomMetrics.  # noqa: E501
        :type humidity: float
        :param voc: The voc of this RoomMetrics.  # noqa: E501
        :type voc: float
        :param light: The light of this RoomMetrics.  # noqa: E501
        :type light: float
        :param sound: The sound of this RoomMetrics.  # noqa: E501
        :type sound: float
        """
        self.swagger_types = {
            'temperature': float,
            'co2': float,
            'humidity': float,
            'voc': float,
            'light': float,
            'sound': float
        }

        self.attribute_map = {
            'temperature': 'temperature',
            'co2': 'co2',
            'humidity': 'humidity',
            'voc': 'voc',
            'light': 'light',
            'sound': 'sound'
        }
        self._temperature = temperature
        self._co2 = co2
        self._humidity = humidity
        self._voc = voc
        self._light = light
        self._sound = sound

    @classmethod
    def from_dict(cls, dikt) -> 'RoomMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoomMetrics of this RoomMetrics.  # noqa: E501
        :rtype: RoomMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature(self) -> float:
        """Gets the temperature of this RoomMetrics.

        Ambient temperature inside the room measured in degrees Celsius.  # noqa: E501

        :return: The temperature of this RoomMetrics.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this RoomMetrics.

        Ambient temperature inside the room measured in degrees Celsius.  # noqa: E501

        :param temperature: The temperature of this RoomMetrics.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def co2(self) -> float:
        """Gets the co2 of this RoomMetrics.

        CO2 content in the room measured in parts per million.  # noqa: E501

        :return: The co2 of this RoomMetrics.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2: float):
        """Sets the co2 of this RoomMetrics.

        CO2 content in the room measured in parts per million.  # noqa: E501

        :param co2: The co2 of this RoomMetrics.
        :type co2: float
        """

        self._co2 = co2

    @property
    def humidity(self) -> float:
        """Gets the humidity of this RoomMetrics.

        Humidity level in the room measured in percentage.  # noqa: E501

        :return: The humidity of this RoomMetrics.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this RoomMetrics.

        Humidity level in the room measured in percentage.  # noqa: E501

        :param humidity: The humidity of this RoomMetrics.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def voc(self) -> float:
        """Gets the voc of this RoomMetrics.

        Volatile Organic Compounds (VOC) measured in milligrams per cubic meter.  # noqa: E501

        :return: The voc of this RoomMetrics.
        :rtype: float
        """
        return self._voc

    @voc.setter
    def voc(self, voc: float):
        """Sets the voc of this RoomMetrics.

        Volatile Organic Compounds (VOC) measured in milligrams per cubic meter.  # noqa: E501

        :param voc: The voc of this RoomMetrics.
        :type voc: float
        """

        self._voc = voc

    @property
    def light(self) -> float:
        """Gets the light of this RoomMetrics.

        Light intensity measured in lux.  # noqa: E501

        :return: The light of this RoomMetrics.
        :rtype: float
        """
        return self._light

    @light.setter
    def light(self, light: float):
        """Sets the light of this RoomMetrics.

        Light intensity measured in lux.  # noqa: E501

        :param light: The light of this RoomMetrics.
        :type light: float
        """

        self._light = light

    @property
    def sound(self) -> float:
        """Gets the sound of this RoomMetrics.

        Sound level measured in decibels.  # noqa: E501

        :return: The sound of this RoomMetrics.
        :rtype: float
        """
        return self._sound

    @sound.setter
    def sound(self, sound: float):
        """Sets the sound of this RoomMetrics.

        Sound level measured in decibels.  # noqa: E501

        :param sound: The sound of this RoomMetrics.
        :type sound: float
        """

        self._sound = sound
